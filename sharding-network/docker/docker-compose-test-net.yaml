# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

volumes:
  orderer.example.com:
  
  orderer1.example.com:

  peer0.org1.example.com:
  peer1.org1.example.com:
  peer2.org1.example.com:
  peer3.org1.example.com:
  peer4.org1.example.com:
  peer5.org1.example.com:
  peer6.org1.example.com:
  peer7.org1.example.com:
  peer8.org1.example.com:
 

  peer0.org2.example.com:
  peer1.org2.example.com:
  peer2.org2.example.com:
  peer3.org2.example.com:
  peer4.org2.example.com:
  peer5.org2.example.com:
  peer6.org2.example.com:
  peer7.org2.example.com:
  peer8.org2.example.com:
  peer9.org2.example.com:
  peer10.org2.example.com:
  peer11.org2.example.com:
  peer12.org2.example.com:
  peer13.org2.example.com:
  peer14.org2.example.com:
  peer15.org2.example.com:
  peer16.org2.example.com:
  peer17.org2.example.com:
  peer18.org2.example.com:
  peer19.org2.example.com:
  peer20.org2.example.com:
  peer21.org2.example.com:
  peer22.org2.example.com:
  peer23.org2.example.com:
  peer24.org2.example.com:
  peer25.org2.example.com:
  peer26.org2.example.com:
  peer27.org2.example.com:
  peer28.org2.example.com:
  peer29.org2.example.com:
  peer30.org2.example.com:
  peer31.org2.example.com:
  peer32.org2.example.com:
  peer33.org2.example.com:



  peer0.org3.example.com:
  peer1.org3.example.com:
  peer2.org3.example.com:
  peer3.org3.example.com:
  peer4.org3.example.com:
  peer5.org3.example.com:
  peer6.org3.example.com:
  peer7.org3.example.com:
  peer8.org3.example.com:
  peer9.org3.example.com:
  peer10.org3.example.com:
  peer11.org3.example.com:
  peer12.org3.example.com:
  peer13.org3.example.com:
  peer14.org3.example.com:
  peer15.org3.example.com:
  peer16.org3.example.com:
  peer17.org3.example.com:
  peer18.org3.example.com:
  peer19.org3.example.com:
  peer20.org3.example.com:
  peer21.org3.example.com:
  peer22.org3.example.com:
  peer23.org3.example.com:
  peer24.org3.example.com:
  peer25.org3.example.com:
  peer26.org3.example.com:
  peer27.org3.example.com:
  peer28.org3.example.com:
  peer29.org3.example.com:
  peer30.org3.example.com:
  peer31.org3.example.com:
  peer32.org3.example.com:
  peer33.org3.example.com:    

  peer0.org4.example.com:
  

networks:
  test:

services:

  orderer.example.com:
    container_name: orderer.example.com
    image: hyperledger/fabric-orderer:$IMAGE_TAG
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
        - ../system-genesis-block/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
        - ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
        - ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls
        - orderer.example.com:/var/hyperledger/production/orderer
    ports:
      - 7050:7050
    networks:
      - test

  orderer1.example.com:
    container_name: orderer1.example.com
    image: hyperledger/fabric-orderer:$IMAGE_TAG
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=12050
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
        - ../system-genesis-block/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
        - ../organizations/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/var/hyperledger/orderer/msp
        - ../organizations/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/:/var/hyperledger/orderer/tls
        - orderer1.example.com:/var/hyperledger/production/orderer
    ports:
      - 12050:7050
    networks:
      - test

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
        - peer0.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 7051:7051
    networks:
      - test

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      #- FABRIC_LOGGING_SPEC=INFO
      - FABRIC_LOGGING_SPEC=DEBUG
      
  
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_ADDRESS=peer1.org1.example.com:8051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:8051
      - CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:8052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org1.example.com:8051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:8051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls
        - peer1.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 8051:8051
    networks:
      - test

  peer2.org1.example.com:
    container_name: peer2.org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      - CORE_PEER_TLS_ENABLED=true
 
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer2.org1.example.com
      - CORE_PEER_ADDRESS=peer2.org1.example.com:11051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:11051
      - CORE_PEER_CHAINCODEADDRESS=peer2.org1.example.com:11052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:11052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer2.org1.example.com:11051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2.org1.example.com:11051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org1.example.com/peers/peer2.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org1.example.com/peers/peer2.org1.example.com/tls:/etc/hyperledger/fabric/tls
        - peer2.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 11051:11051
    networks:
      - test

  peer3.org1.example.com:
    container_name: peer3.org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer3.org1.example.com
      - CORE_PEER_ADDRESS=peer3.org1.example.com:12051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:12051
      - CORE_PEER_CHAINCODEADDRESS=peer3.org1.example.com:12052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:12052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer3.org1.example.com:12051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer3.org1.example.com:12051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org1.example.com/peers/peer3.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org1.example.com/peers/peer3.org1.example.com/tls:/etc/hyperledger/fabric/tls
        - peer3.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 12051:12051
    networks:
      - test

  peer4.org1.example.com:
    container_name: peer4.org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer4.org1.example.com
      - CORE_PEER_ADDRESS=peer4.org1.example.com:13051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:13051
      - CORE_PEER_CHAINCODEADDRESS=peer4.org1.example.com:13052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:13052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer4.org1.example.com:13051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer4.org1.example.com:13051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org1.example.com/peers/peer4.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org1.example.com/peers/peer4.org1.example.com/tls:/etc/hyperledger/fabric/tls
        - peer4.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 13051:13051
    networks:
      - test

  peer5.org1.example.com:
    container_name: peer5.org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer5.org1.example.com
      - CORE_PEER_ADDRESS=peer5.org1.example.com:14051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:14051
      - CORE_PEER_CHAINCODEADDRESS=peer5.org1.example.com:14052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:14052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer5.org1.example.com:14051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer5.org1.example.com:14051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org1.example.com/peers/peer5.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org1.example.com/peers/peer5.org1.example.com/tls:/etc/hyperledger/fabric/tls
        - peer5.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 14051:14051
    networks:
      - test

  peer6.org1.example.com:
    container_name: peer6.org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes  
      - CORE_PEER_ID=peer6.org1.example.com
      - CORE_PEER_ADDRESS=peer6.org1.example.com:15051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:15051
      - CORE_PEER_CHAINCODEADDRESS=peer6.org1.example.com:15052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:15052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer6.org1.example.com:15051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer6.org1.example.com:15051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org1.example.com/peers/peer6.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org1.example.com/peers/peer6.org1.example.com/tls:/etc/hyperledger/fabric/tls
        - peer6.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 15051:15051
    networks:
      - test

  peer7.org1.example.com:
    container_name: peer7.org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
    #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer7.org1.example.com
      - CORE_PEER_ADDRESS=peer7.org1.example.com:16051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:16051
      - CORE_PEER_CHAINCODEADDRESS=peer7.org1.example.com:16052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:16052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer7.org1.example.com:16051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer7.org1.example.com:16051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org1.example.com/peers/peer7.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org1.example.com/peers/peer7.org1.example.com/tls:/etc/hyperledger/fabric/tls
        - peer7.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 16051:16051
    networks:
      - test

  peer8.org1.example.com:
    container_name: peer8.org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer8.org1.example.com
      - CORE_PEER_ADDRESS=peer8.org1.example.com:17051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:17051
      - CORE_PEER_CHAINCODEADDRESS=peer8.org1.example.com:17052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:17052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer8.org1.example.com:17051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer8.org1.example.com:17051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org1.example.com/peers/peer8.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org1.example.com/peers/peer8.org1.example.com/tls:/etc/hyperledger/fabric/tls
        - peer8.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 17051:17051
    networks:
      - test




  peer0.org2.example.com:
    container_name: peer0.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
       
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0.org2.example.com:9051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:9051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:9052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:9051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:9051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer0.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 9051:9051
    networks:
      - test

  peer1.org2.example.com:
    container_name: peer1.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
  
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer1.org2.example.com
      - CORE_PEER_ADDRESS=peer1.org2.example.com:50051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:50051
      - CORE_PEER_CHAINCODEADDRESS=peer1.org2.example.com:50052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:50052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com:50051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:50051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer1.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 50051:50051
    networks:
      - test

  peer2.org2.example.com:
    container_name: peer2.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      - CORE_PEER_TLS_ENABLED=true
 
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer2.org2.example.com
      - CORE_PEER_ADDRESS=peer2.org2.example.com:51051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:51051
      - CORE_PEER_CHAINCODEADDRESS=peer2.org2.example.com:51052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:51052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer2.org2.example.com:51051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2.org2.example.com:51051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer2.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer2.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer2.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 51051:51051
    networks:
      - test

  peer3.org2.example.com:
    container_name: peer3.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer3.org2.example.com
      - CORE_PEER_ADDRESS=peer3.org2.example.com:52051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:52051
      - CORE_PEER_CHAINCODEADDRESS=peer3.org2.example.com:52052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:52052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer3.org2.example.com:52051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer3.org2.example.com:52051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer3.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer3.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer3.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 52051:52051
    networks:
      - test

  peer4.org2.example.com:
    container_name: peer4.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer4.org2.example.com
      - CORE_PEER_ADDRESS=peer4.org2.example.com:53051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:53051
      - CORE_PEER_CHAINCODEADDRESS=peer4.org2.example.com:53052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:53052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer4.org2.example.com:53051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer4.org2.example.com:53051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer4.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer4.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer4.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 53051:53051
    networks:
      - test

  peer5.org2.example.com:
    container_name: peer5.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer5.org2.example.com
      - CORE_PEER_ADDRESS=peer5.org2.example.com:54051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:54051
      - CORE_PEER_CHAINCODEADDRESS=peer5.org2.example.com:54052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:54052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer5.org2.example.com:54051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer5.org2.example.com:54051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer5.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer5.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer5.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 54051:54051
    networks:
      - test

  peer6.org2.example.com:
    container_name: peer6.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer6.org2.example.com
      - CORE_PEER_ADDRESS=peer6.org2.example.com:55051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:55051
      - CORE_PEER_CHAINCODEADDRESS=peer6.org2.example.com:55052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:55052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer6.org2.example.com:55051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer6.org2.example.com:55051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer6.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer6.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer6.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 55051:55051
    networks:
      - test

  peer7.org2.example.com:
    container_name: peer7.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
    #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer7.org2.example.com
      - CORE_PEER_ADDRESS=peer7.org2.example.com:56051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:56051
      - CORE_PEER_CHAINCODEADDRESS=peer7.org2.example.com:56052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:56052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer7.org2.example.com:56051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer7.org2.example.com:56051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer7.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer7.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer7.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 56051:56051
    networks:
      - test

  peer8.org2.example.com:
    container_name: peer8.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer8.org2.example.com
      - CORE_PEER_ADDRESS=peer8.org2.example.com:57051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:57051
      - CORE_PEER_CHAINCODEADDRESS=peer8.org2.example.com:57052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:57052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer8.org2.example.com:57051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer8.org2.example.com:57051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer8.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer8.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer8.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 57051:57051
    networks:
      - test

  peer9.org2.example.com:
    container_name: peer9.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer9.org2.example.com
      - CORE_PEER_ADDRESS=peer9.org2.example.com:58051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:58051
      - CORE_PEER_CHAINCODEADDRESS=peer9.org2.example.com:58052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:58052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer9.org2.example.com:58051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer9.org2.example.com:58051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer9.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer9.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer9.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 58051:58051
    networks:
      - test

  peer10.org2.example.com:
    container_name: peer10.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer10.org2.example.com
      - CORE_PEER_ADDRESS=peer10.org2.example.com:59051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:59051
      - CORE_PEER_CHAINCODEADDRESS=peer10.org2.example.com:59052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:59052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer10.org2.example.com:59051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer10.org2.example.com:59051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer10.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer10.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer10.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 59051:59051
    networks:
      - test

  peer11.org2.example.com:
    container_name: peer11.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
  
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer11.org2.example.com
      - CORE_PEER_ADDRESS=peer11.org2.example.com:20151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:20151
      - CORE_PEER_CHAINCODEADDRESS=peer11.org2.example.com:20152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:20152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer11.org2.example.com:20151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer11.org2.example.com:20151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer11.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer11.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer11.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 20151:20151
    networks:
      - test

  peer12.org2.example.com:
    container_name: peer12.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      - CORE_PEER_TLS_ENABLED=true
 
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer12.org2.example.com
      - CORE_PEER_ADDRESS=peer12.org2.example.com:21151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:21151
      - CORE_PEER_CHAINCODEADDRESS=peer12.org2.example.com:21152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:21152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer12.org2.example.com:21151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer12.org2.example.com:21151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer12.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer12.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer12.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 21151:21151
    networks:
      - test

  peer13.org2.example.com:
    container_name: peer13.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer13.org2.example.com
      - CORE_PEER_ADDRESS=peer13.org2.example.com:22151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:22151
      - CORE_PEER_CHAINCODEADDRESS=peer13.org2.example.com:22152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:22152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer13.org2.example.com:22151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer13.org2.example.com:22151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer13.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer13.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer13.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 22151:22151
    networks:
      - test

  peer14.org2.example.com:
    container_name: peer14.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer14.org2.example.com
      - CORE_PEER_ADDRESS=peer14.org2.example.com:23151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:23151
      - CORE_PEER_CHAINCODEADDRESS=peer14.org2.example.com:23152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:23152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer14.org2.example.com:23151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer14.org2.example.com:23151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer14.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer14.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer14.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 23151:23151
    networks:
      - test

  peer15.org2.example.com:
    container_name: peer15.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer15.org2.example.com
      - CORE_PEER_ADDRESS=peer15.org2.example.com:24151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:24151
      - CORE_PEER_CHAINCODEADDRESS=peer15.org2.example.com:24152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:24152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer15.org2.example.com:24151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer15.org2.example.com:24151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer15.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer15.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer15.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 24151:24151
    networks:
      - test

  peer16.org2.example.com:
    container_name: peer16.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer16.org2.example.com
      - CORE_PEER_ADDRESS=peer16.org2.example.com:25151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:25151
      - CORE_PEER_CHAINCODEADDRESS=peer16.org2.example.com:25152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:25152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer16.org2.example.com:25151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer16.org2.example.com:25151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer16.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer16.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer16.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 25151:25151
    networks:
      - test

  peer17.org2.example.com:
    container_name: peer17.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
    #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer17.org2.example.com
      - CORE_PEER_ADDRESS=peer17.org2.example.com:26151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:26151
      - CORE_PEER_CHAINCODEADDRESS=peer17.org2.example.com:26152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:26152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer17.org2.example.com:26151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer17.org2.example.com:26151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer17.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer17.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer17.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 26151:26151
    networks:
      - test

  peer18.org2.example.com:
    container_name: peer18.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer18.org2.example.com
      - CORE_PEER_ADDRESS=peer18.org2.example.com:45151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:45151
      - CORE_PEER_CHAINCODEADDRESS=peer18.org2.example.com:45152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:45152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer18.org2.example.com:45151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer18.org2.example.com:45151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer18.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer18.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer18.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 45151:45151
    networks:
      - test

  peer19.org2.example.com:
    container_name: peer19.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer19.org2.example.com
      - CORE_PEER_ADDRESS=peer19.org2.example.com:28151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:28151
      - CORE_PEER_CHAINCODEADDRESS=peer19.org2.example.com:28152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:28152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer19.org2.example.com:28151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer19.org2.example.com:28151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer19.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer19.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer19.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 28151:28151
    networks:
      - test






  peer20.org2.example.com:
    container_name: peer20.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
       
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer20.org2.example.com
      - CORE_PEER_ADDRESS=peer20.org2.example.com:29151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:29151
      - CORE_PEER_CHAINCODEADDRESS=peer20.org2.example.com:29152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:29152
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer20.org2.example.com:29151
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer20.org2.example.com:29151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer20.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer20.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer20.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 29151:29151
    networks:
      - test

  peer21.org2.example.com:
    container_name: peer21.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer21.org2.example.com
      - CORE_PEER_ADDRESS=peer21.org2.example.com:31151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:31151
      - CORE_PEER_CHAINCODEADDRESS=peer21.org2.example.com:31152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:31152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer21.org2.example.com:31151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer21.org2.example.com:31151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer21.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer21.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer21.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 31151:31151
    networks:
      - test

  peer22.org2.example.com:
    container_name: pee22.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer22.org2.example.com
      - CORE_PEER_ADDRESS=peer22.org2.example.com:32151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:32151
      - CORE_PEER_CHAINCODEADDRESS=peer22.org2.example.com:32152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:32152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer22.org2.example.com:32151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer22.org2.example.com:32151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer22.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer22.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer22.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 32151:32151
    networks:
      - test

  peer23.org2.example.com:
    container_name: peer23.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
  
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer23.org2.example.com
      - CORE_PEER_ADDRESS=peer23.org2.example.com:33151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:33151
      - CORE_PEER_CHAINCODEADDRESS=peer23.org2.example.com:33152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:33152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer23.org2.example.com:33151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer23.org2.example.com:33151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer23.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer23.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer23.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 33151:33151
    networks:
      - test

  peer24.org2.example.com:
    container_name: peer24.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      - CORE_PEER_TLS_ENABLED=true
 
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer24.org2.example.com
      - CORE_PEER_ADDRESS=peer24.org2.example.com:34151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:34151
      - CORE_PEER_CHAINCODEADDRESS=peer24.org2.example.com:34152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:34152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer24.org2.example.com:34151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer24.org2.example.com:34151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer24.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer24.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer24.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 34151:34151
    networks:
      - test

  peer25.org2.example.com:
    container_name: peer25.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer25.org2.example.com
      - CORE_PEER_ADDRESS=peer25.org2.example.com:35151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:35151
      - CORE_PEER_CHAINCODEADDRESS=peer25.org2.example.com:35152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:35152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer25.org2.example.com:35151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer25.org2.example.com:35151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer25.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer25.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer25.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 35151:35151
    networks:
      - test

  peer26.org2.example.com:
    container_name: peer26.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer26.org2.example.com
      - CORE_PEER_ADDRESS=peer26.org2.example.com:36151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:36151
      - CORE_PEER_CHAINCODEADDRESS=peer26.org2.example.com:36152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:36152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer26.org2.example.com:36151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer26.org2.example.com:36151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer26.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer26.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer26.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 36151:36151
    networks:
      - test

  peer27.org2.example.com:
    container_name: peer27.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer27 .org2.example.com
      - CORE_PEER_ADDRESS=peer27.org2.example.com:37151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:37151
      - CORE_PEER_CHAINCODEADDRESS=peer27.org2.example.com:37152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:37152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer27.org2.example.com:37151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer27.org2.example.com:37151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer27.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer27.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer27.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 37151:37151
    networks:
      - test

  peer28.org2.example.com:
    container_name: peer28.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer28.org2.example.com
      - CORE_PEER_ADDRESS=peer28.org2.example.com:38151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:38151
      - CORE_PEER_CHAINCODEADDRESS=peer28.org2.example.com:38152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:38152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer28.org2.example.com:38151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer28.org2.example.com:38151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer28.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer28.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer28.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 38151:38151
    networks:
      - test

  peer29.org2.example.com:
    container_name: peer29.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
    #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer29.org2.example.com
      - CORE_PEER_ADDRESS=peer29.org2.example.com:39151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:39151
      - CORE_PEER_CHAINCODEADDRESS=peer29.org2.example.com:39152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:39152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer29.org2.example.com:39151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer29.org2.example.com:39151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer29.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer29.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer29.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 39151:39151
    networks:
      - test

  peer30.org2.example.com:
    container_name: peer30.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crtv
      # Peer specific variabes
      - CORE_PEER_ID=peer30.org2.example.com
      - CORE_PEER_ADDRESS=peer30.org2.example.com:40151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:40151
      - CORE_PEER_CHAINCODEADDRESS=peer30.org2.example.com:40152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:40152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer30.org2.example.com:40151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer30.org2.example.com:40151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer30.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer30.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer30.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 40151:40151
    networks:
      - test

  peer31.org2.example.com:
    container_name: peer31.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer31.org2.example.com
      - CORE_PEER_ADDRESS=peer31.org2.example.com:41151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:41151
      - CORE_PEER_CHAINCODEADDRESS=peer31.org2.example.com:41152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:41152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer31.org2.example.com:41151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer31.org2.example.com:41151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer31.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer31.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer31.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 41151:41151
    networks:
      - test






  peer32.org2.example.com:
    container_name: peer32.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
       
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer32.org2.example.com
      - CORE_PEER_ADDRESS=peer32.org2.example.com:42151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:42151
      - CORE_PEER_CHAINCODEADDRESS=peer32.org2.example.com:42152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:42152
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer32.org2.example.com:42151
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer32.org2.example.com:42151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer32.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer32.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer32.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 42151:42151
    networks:
      - test

  peer33.org2.example.com:
    container_name: peer33.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer33.org2.example.com
      - CORE_PEER_ADDRESS=peer33.org2.example.com:43151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:43151
      - CORE_PEER_CHAINCODEADDRESS=peer33.org2.example.com:43152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:43152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer33.org2.example.com:43151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer33.org2.example.com:43151
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer33.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer33.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer33.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 43151:43151
    networks:
      - test



  peer0.org3.example.com:
    container_name: peer0.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org3.example.com
      - CORE_PEER_ADDRESS=peer0.org3.example.com:30051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:30051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org3.example.com:30052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:30052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org3.example.com:30051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org3.example.com:30051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer0.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 30051:30051
    networks:
      - test

  peer1.org3.example.com:
    container_name: peer1.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
  
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer1.org3.example.com
      - CORE_PEER_ADDRESS=peer1.org3.example.com:8151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:8151
      - CORE_PEER_CHAINCODEADDRESS=peer1.org3.example.com:8152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org3.example.com:8151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org3.example.com:8151
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer1.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer1.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer1.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 8151:8151
    networks:
      - test

  peer2.org3.example.com:
    container_name: peer2.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      - CORE_PEER_TLS_ENABLED=true
 
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer2.org3.example.com
      - CORE_PEER_ADDRESS=peer2.org3.example.com:11151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:11151
      - CORE_PEER_CHAINCODEADDRESS=peer2.org3.example.com:11152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:11152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer2.org3.example.com:11151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2.org3.example.com:11151
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer2.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer2.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer2.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 11151:11151
    networks:
      - test

  peer3.org3.example.com:
    container_name: peer3.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer3.org3.example.com
      - CORE_PEER_ADDRESS=peer3.org3.example.com:12151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:12151
      - CORE_PEER_CHAINCODEADDRESS=peer3.org3.example.com:12152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:12152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer3.org3.example.com:12151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer3.org3.example.com:12151
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer3.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer3.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer3.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 12151:12151
    networks:
      - test

  peer4.org3.example.com:
    container_name: peer4.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer4.org3.example.com
      - CORE_PEER_ADDRESS=peer4.org3.example.com:13151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:13151
      - CORE_PEER_CHAINCODEADDRESS=peer4.org3.example.com:13152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:13152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer4.org3.example.com:13151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer4.org3.example.com:13151
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer4.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer4.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer4.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 13151:13151
    networks:
      - test

  peer5.org3.example.com:
    container_name: peer5.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer5.org3.example.com
      - CORE_PEER_ADDRESS=peer5.org3.example.com:14151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:14151
      - CORE_PEER_CHAINCODEADDRESS=peer5.org3.example.com:14152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:14152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer5.org3.example.com:14151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer5.org3.example.com:14151
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer5.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer5.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer5.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 14151:14151
    networks:
      - test

  peer6.org3.example.com:
    container_name: peer6.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer6.org3.example.com
      - CORE_PEER_ADDRESS=peer6.org3.example.com:15151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:15151
      - CORE_PEER_CHAINCODEADDRESS=peer6.org3.example.com:15152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:15152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer6.org3.example.com:15151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer6.org3.example.com:15151
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer6.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer6.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer6.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 15151:15151
    networks:
      - test

  peer7.org3.example.com:
    container_name: peer7.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
    #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer7.org3.example.com
      - CORE_PEER_ADDRESS=peer7.org3.example.com:16151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:16151
      - CORE_PEER_CHAINCODEADDRESS=peer7.org3.example.com:16152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:16152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer7.org3.example.com:16151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer7.org3.example.com:16151
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer7.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer7.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer7.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 16151:16151
    networks:
      - test

  peer8.org3.example.com:
    container_name: peer8.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer8.org3.example.com
      - CORE_PEER_ADDRESS=peer8.org3.example.com:17151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:17151
      - CORE_PEER_CHAINCODEADDRESS=peer8.org3.example.com:17152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:17152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer8.org3.example.com:17151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer8.org3.example.com:17151
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer8.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer8.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer8.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 17151:17151
    networks:
      - test

  peer9.org3.example.com:
    container_name: peer9.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer9.org3.example.com
      - CORE_PEER_ADDRESS=peer9.org3.example.com:18051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:18051
      - CORE_PEER_CHAINCODEADDRESS=peer9.org3.example.com:18052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:18052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer9.org3.example.com:18051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer9.org3.example.com:18051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer9.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer9.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer9.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 18051:18051
    networks:
      - test

  peer10.org3.example.com:
    container_name: peer10.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer10.org3.example.com
      - CORE_PEER_ADDRESS=peer10.org3.example.com:19051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:19051
      - CORE_PEER_CHAINCODEADDRESS=peer10.org3.example.com:19052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:19052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer10.org3.example.com:19051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer10.org3.example.com:19051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer10.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer10.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer10.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 19051:19051
    networks:
      - test

  peer11.org3.example.com:
    container_name: peer11.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
  
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer11.org3.example.com
      - CORE_PEER_ADDRESS=peer11.org3.example.com:20051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:20051
      - CORE_PEER_CHAINCODEADDRESS=peer11.org3.example.com:20052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:20052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer11.org3.example.com:20051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer11.org3.example.com:20051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer11.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer11.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer11.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 20051:20051
    networks:
      - test

  peer12.org3.example.com:
    container_name: peer12.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      - CORE_PEER_TLS_ENABLED=true
 
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer12.org3.example.com
      - CORE_PEER_ADDRESS=peer12.org3.example.com:21051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:21051
      - CORE_PEER_CHAINCODEADDRESS=peer12.org3.example.com:21052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:21052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer12.org3.example.com:21051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer12.org3.example.com:21051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer12.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer12.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer12.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 21051:21051
    networks:
      - test

  peer13.org3.example.com:
    container_name: peer13.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer13.org3.example.com
      - CORE_PEER_ADDRESS=peer13.org3.example.com:22051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:22051
      - CORE_PEER_CHAINCODEADDRESS=peer13.org3.example.com:22052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:22052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer13.org3.example.com:22051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer13.org3.example.com:22051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer13.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer13.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer13.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 22051:22051
    networks:
      - test

  peer14.org3.example.com:
    container_name: peer14.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer14.org3.example.com
      - CORE_PEER_ADDRESS=peer14.org3.example.com:23051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:23051
      - CORE_PEER_CHAINCODEADDRESS=peer14.org3.example.com:23052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:23052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer14.org3.example.com:23051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer14.org3.example.com:23051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer14.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer14.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer14.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 23051:23051
    networks:
      - test

  peer15.org3.example.com:
    container_name: peer15.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer15.org3.example.com
      - CORE_PEER_ADDRESS=peer15.org3.example.com:24051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:24051
      - CORE_PEER_CHAINCODEADDRESS=peer15.org3.example.com:24052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:24052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer15.org3.example.com:24051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer15.org3.example.com:24051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer15.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer15.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer15.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 24051:24051
    networks:
      - test

  peer16.org3.example.com:
    container_name: peer16.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer16.org3.example.com
      - CORE_PEER_ADDRESS=peer16.org3.example.com:25051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:25051
      - CORE_PEER_CHAINCODEADDRESS=peer16.org3.example.com:25052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:25052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer16.org3.example.com:25051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer16.org3.example.com:25051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer16.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer16.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer16.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 25051:25051
    networks:
      - test

  peer17.org3.example.com:
    container_name: peer17.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
    #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer17.org3.example.com
      - CORE_PEER_ADDRESS=peer17.org3.example.com:26051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:26051
      - CORE_PEER_CHAINCODEADDRESS=peer17.org3.example.com:26052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:26052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer17.org3.example.com:26051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer17.org3.example.com:26051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer17.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer17.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer17.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 26051:26051
    networks:
      - test

  peer18.org3.example.com:
    container_name: peer18.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer18.org3.example.com
      - CORE_PEER_ADDRESS=peer18.org3.example.com:44151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:44151
      - CORE_PEER_CHAINCODEADDRESS=peer18.org3.example.com:44152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:44152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer18.org3.example.com:44151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer18.org3.example.com:44151
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer18.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer18.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer18.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 44151:44151
    networks:
      - test

  peer19.org3.example.com:
    container_name: peer19.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer19.org3.example.com
      - CORE_PEER_ADDRESS=peer19.org3.example.com:28051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:28051
      - CORE_PEER_CHAINCODEADDRESS=peer19.org3.example.com:28052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:28052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer19.org3.example.com:28051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer19.org3.example.com:28051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer19.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer19.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer19.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 28051:28051
    networks:
      - test






  peer20.org3.example.com:
    container_name: peer20.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
       
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer20.org3.example.com
      - CORE_PEER_ADDRESS=peer20.org3.example.com:29051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:29051
      - CORE_PEER_CHAINCODEADDRESS=peer20.org3.example.com:29052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:29052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer20.org3.example.com:29051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer20.org3.example.com:29051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer20.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer20.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer20.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 29051:29051
    networks:
      - test

  peer21.org3.example.com:
    container_name: peer21.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer21.org3.example.com
      - CORE_PEER_ADDRESS=peer21.org3.example.com:31051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:31051
      - CORE_PEER_CHAINCODEADDRESS=peer21.org3.example.com:31052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:31052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer21.org3.example.com:31051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer21.org3.example.com:31051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer21.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer21.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer21.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 31051:31051
    networks:
      - test

  peer22.org3.example.com:
    container_name: pee22.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer22.org3.example.com
      - CORE_PEER_ADDRESS=peer22.org3.example.com:32051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:32051
      - CORE_PEER_CHAINCODEADDRESS=peer22.org3.example.com:32052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:32052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer22.org3.example.com:32051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer22.org3.example.com:32051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer22.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer22.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer22.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 32051:32051
    networks:
      - test

  peer23.org3.example.com:
    container_name: peer23.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
  
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer23.org3.example.com
      - CORE_PEER_ADDRESS=peer23.org3.example.com:33051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:33051
      - CORE_PEER_CHAINCODEADDRESS=peer23.org3.example.com:33052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:33052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer23.org3.example.com:33051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer23.org3.example.com:33051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer23.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer23.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer23.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 33051:33051
    networks:
      - test

  peer24.org3.example.com:
    container_name: peer24.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      - CORE_PEER_TLS_ENABLED=true
 
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer24.org3.example.com
      - CORE_PEER_ADDRESS=peer24.org3.example.com:34051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:34051
      - CORE_PEER_CHAINCODEADDRESS=peer24.org3.example.com:34052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:34052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer24.org3.example.com:34051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer24.org3.example.com:34051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer24.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer24.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer24.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 34051:34051
    networks:
      - test

  peer25.org3.example.com:
    container_name: peer25.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      
      
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer25.org3.example.com
      - CORE_PEER_ADDRESS=peer25.org3.example.com:35051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:35051
      - CORE_PEER_CHAINCODEADDRESS=peer25.org3.example.com:35052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:35052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer25.org3.example.com:35051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer25.org3.example.com:35051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer25.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer25.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer25.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 35051:35051
    networks:
      - test

  peer26.org3.example.com:
    container_name: peer26.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer26.org3.example.com
      - CORE_PEER_ADDRESS=peer26.org3.example.com:36051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:36051
      - CORE_PEER_CHAINCODEADDRESS=peer26.org3.example.com:36052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:36052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer26.org3.example.com:36051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer26.org3.example.com:36051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer26.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer26.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer26.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 36051:36051
    networks:
      - test

  peer27.org3.example.com:
    container_name: peer27.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer27 .org3.example.com
      - CORE_PEER_ADDRESS=peer27.org3.example.com:37051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:37051
      - CORE_PEER_CHAINCODEADDRESS=peer27.org3.example.com:37052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:37052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer27.org3.example.com:37051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer27.org3.example.com:37051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer27.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer27.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer27.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 37051:37051
    networks:
      - test

  peer28.org3.example.com:
    container_name: peer28.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer28.org3.example.com
      - CORE_PEER_ADDRESS=peer28.org3.example.com:38051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:38051
      - CORE_PEER_CHAINCODEADDRESS=peer28.org3.example.com:38052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:38052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer28.org3.example.com:38051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer28.org3.example.com:38051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer28.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer28.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer28.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 38051:38051
    networks:
      - test

  peer29.org3.example.com:
    container_name: peer29.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
    #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer29.org3.example.com
      - CORE_PEER_ADDRESS=peer29.org3.example.com:39051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:39051
      - CORE_PEER_CHAINCODEADDRESS=peer29.org3.example.com:39052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:39052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer29.org3.example.com:39051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer29.org3.example.com:39051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer29.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer29.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer29.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 39051:39051
    networks:
      - test

  peer30.org3.example.com:
    container_name: peer30.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer30.org3.example.com
      - CORE_PEER_ADDRESS=peer30.org3.example.com:40051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:40051
      - CORE_PEER_CHAINCODEADDRESS=peer30.org3.example.com:40052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:40052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer30.org3.example.com:40051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer30.org3.example.com:40051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer30.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer30.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer30.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 40051:40051
    networks:
      - test

  peer31.org3.example.com:
    container_name: peer31.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer31.org3.example.com
      - CORE_PEER_ADDRESS=peer31.org3.example.com:41051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:41051
      - CORE_PEER_CHAINCODEADDRESS=peer31.org3.example.com:41052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:41052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer31.org3.example.com:41051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer31.org3.example.com:41051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer31.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer31.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer31.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 41051:41051
    networks:
      - test






  peer32.org3.example.com:
    container_name: peer32.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    cap_add:
      - NET_ADMIN
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
       
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer32.org3.example.com
      - CORE_PEER_ADDRESS=peer32.org3.example.com:42051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:42051
      - CORE_PEER_CHAINCODEADDRESS=peer32.org3.example.com:42052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:42052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer32.org3.example.com:42051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer32.org3.example.com:42051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer32.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer32.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer32.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 42051:42051
    networks:
      - test

  peer33.org3.example.com:
    container_name: peer33.org3.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer33.org3.example.com
      - CORE_PEER_ADDRESS=peer33.org3.example.com:43051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:43051
      - CORE_PEER_CHAINCODEADDRESS=peer33.org3.example.com:43052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:43052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer33.org3.example.com:43051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer33.org3.example.com:43051
      - CORE_PEER_LOCALMSPID=Org3MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org3.example.com/peers/peer33.org3.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org3.example.com/peers/peer33.org3.example.com/tls:/etc/hyperledger/fabric/tls
        - peer33.org3.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 43051:43051
    networks:
      - test



  peer0.org4.example.com:
    container_name: peer0.org4.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org4.example.com
      - CORE_PEER_ADDRESS=peer0.org4.example.com:30151
      - CORE_PEER_LISTENADDRESS=0.0.0.0:30151
      - CORE_PEER_CHAINCODEADDRESS=peer0.org4.example.com:30152
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:30152
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org4.example.com:30151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org4.example.com:30151
      - CORE_PEER_LOCALMSPID=Org4MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls:/etc/hyperledger/fabric/tls
        - peer0.org4.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 30151:30151
    networks:
      - test




  cli:
    container_name: cli
    image: hyperledger/fabric-tools:latest
    labels:
      service: hyperledger-fabric
    tty: true
    stdin_open: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
        - ../organizations:/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations
        - ../scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
    depends_on:
      - peer0.org1.example.com
      - peer0.org2.example.com
      - peer0.org3.example.com
      - peer0.org4.example.com
      
    networks:
      - test

